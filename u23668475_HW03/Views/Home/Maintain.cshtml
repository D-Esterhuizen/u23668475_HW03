@model u23668475_HW03.Models.CombinedViewModel
@using PagedList.Mvc;
@using PagedList;
@{
    ViewBag.Title = "Maintain";
}

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<style>
    .container-fluid {
        color: #f5f5f5;
        background-color: #2b2b2b;
        padding: 20px;
    }

    h2 {
        color: #ffffff;
    }

    .card {
        background-color: #3a3a3a;
    }

    .card-body {
        background-color: #2b2b2b;
        border-radius: 10px;
    }

    .table {
        color: #ffffff;
        border-color: #444;
    }

        .table th {
            background-color: #3a3a3a;
        }

        .table tbody tr {
            background-color: #2b2b2b;
            transition: background-color 0.3s, color 0.3s;
        }

            .table tbody tr:hover {
                background-color: #444;
                color: #f0f0f0;
            }

    .table-hover tbody tr:hover td {
        color: #fff;
    }

    .table td, .table th {
        border: 1px solid #444;
    }

    .pagination {
        color: #ffffff;
    }

        .pagination .page-item .page-link {
            color: #ffffff;
            background-color: #3a3a3a;
            border: 1px solid #444;
        }

        .pagination .page-item.active .page-link {
            background-color: #555;
            border-color: #777;
        }

    .btn-primary {
        background-color: #4a4a4a;
        border-color: #555;
        color: #fff;
    }

        .btn-primary:hover {
            background-color: #5a5a5a;
            border-color: #666;
        }

    .btn-details {
        background-color: #007bff;
        color: white;
        border: none;
        margin-right: 5px;
    }

        .btn-details:hover {
            background-color: #0056b3;
        }

    .btn-edit {
        background-color: #ffc107;
        color: white;
        border: none;
        margin-right: 5px;
    }

        .btn-edit:hover {
            background-color: #e0a800;
        }

    .btn-delete {
        background-color: #dc3545;
        color: white;
        border: none;
    }

        .btn-delete:hover {
            background-color: #c82333;
        }
</style>
<h2>Maintain</h2>
<div class="row">
    <div class="col-md-6">

        <div class="card shadow-sm">
            <div class="card-body" style="background-color: #878787b3">
                <h2 class="mb-4">Authors</h2>
                <div class="d-flex justify-content-end mb-3">
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Create", "authors")">Create Author</button>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-bordered table-hover table-sm student-table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Surname</th>

                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.Authors)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.name)</td>
                                    <td>@Html.DisplayFor(modelItem => item.surname)</td>
                                    <td class="text-end">
                                        
                                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Details", "authors", new { id = item.authorId })">Details</button>

                                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Delete", "authors", new { id = item.authorId })">Delete</button>

                                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Edit", "authors", new { id = item.authorId })">Edit Author</button>


                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="d-flex justify-content-center mt-4">
                    @Html.PagedListPager((IPagedList)Model.Authors, page => Url.Action("Maintain", new { page }),
                        new PagedListRenderOptions
                        {
                            LinkToPreviousPageFormat = "Previous",
                            LinkToNextPageFormat = "Next",
                            DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                            DisplayLinkToNextPage = PagedListDisplayMode.Always,
                            DisplayLinkToFirstPage = PagedListDisplayMode.Always,
                            DisplayLinkToLastPage = PagedListDisplayMode.Always,
                            Display = PagedListDisplayMode.IfNeeded,
                            ClassToApplyToFirstListItemInPager = "page-item",
                            ClassToApplyToLastListItemInPager = "page-item",
                            LinkToFirstPageFormat = "First",
                            LinkToLastPageFormat = "Last",
                            UlElementClasses = new[] { "pagination", "justify-content-center" },
                            LiElementClasses = new[] { "page-item" }
                        })
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6">


        <div class="card shadow-sm">
            <div class="card-body" style="background-color: #878787b3">
                <h2 class="mb-4">Types</h2>
                <div class="d-flex justify-content-end mb-3">
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Create", "types")">Add a New Type</button>

                </div>
                <div class="table-responsive">
                    <table class="table table-bordered table-hover table-sm student-table">
                        <thead>
                            <tr>
                                <th>Name</th>



                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.Types)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.name)</td>

                                    <td class="text-end">
                                        <div class="d-flex gap-2 justify-content-end align-items-center">


                                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Details", "types", new { id = item.typeId })">Details</button>

                                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Delete", "types", new { id = item.typeId })">Delete</button>

                                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Edit", "types", new { id = item.typeId })">Edit</button>

                                        </div>
                                    </td>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="d-flex justify-content-center mt-4">
                    @Html.PagedListPager((IPagedList)Model.Types, page => Url.Action("Maintain", new { page }),
                        new PagedListRenderOptions
                        {
                            LinkToPreviousPageFormat = "Previous",
                            LinkToNextPageFormat = "Next",
                            DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                            DisplayLinkToNextPage = PagedListDisplayMode.Always,
                            DisplayLinkToFirstPage = PagedListDisplayMode.Always,
                            DisplayLinkToLastPage = PagedListDisplayMode.Always,
                            Display = PagedListDisplayMode.IfNeeded,
                            ClassToApplyToFirstListItemInPager = "page-item",
                            ClassToApplyToLastListItemInPager = "page-item",
                            LinkToFirstPageFormat = "First",
                            LinkToLastPageFormat = "Last",
                            UlElementClasses = new[] { "pagination", "justify-content-center" },
                            LiElementClasses = new[] { "page-item" }
                        })
                </div>
            </div>
        </div>
    </div>




</div>
<hr />
<div class="row">


    <div class="d-flex justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body" style="background-color: #878787b3">
                    <h2 class="mb-4 text-center">Borrows</h2> <!-- Center the title -->
                    <div class="d-flex justify-content-end mb-3">
                        
                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Create", "borrows")">Check a Book Out</button>

                    </div>
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover table-sm student-table">
                            <thead>
                                <tr>
                                    <th>Student</th>
                                    <th>Book</th>
                                    <th>Date Book Was Taken</th>
                                    <th>Date Returned</th>
                                    <th class="text-end">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Borrows)
                                {
                                    <tr>
                                        <td>@Html.DisplayFor(modelItem => item.student.name)</td>
                                        <td>@Html.DisplayFor(modelItem => item.book.name)</td>
                                        <td>@Html.DisplayFor(modelItem => item.takenDate)</td>
                                        <td>@Html.DisplayFor(modelItem => item.broughtDate)</td>
                                        <td class="text-end">


                                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Details", "borrows", new { id = item.borrowId })">Details</button>

                                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Delete", "borrows", new { id = item.borrowId })">Delete</button>

                                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dynamicModal" data-url="@Url.Action("Edit", "borrows", new { id = item.borrowId })">Edit</button>

                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="d-flex justify-content-center mt-4">
                        @Html.PagedListPager((IPagedList)Model.Borrows, page => Url.Action("Maintain", new { page }),
                            new PagedListRenderOptions
                            {
                                LinkToPreviousPageFormat = "Previous",
                                LinkToNextPageFormat = "Next",
                                DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                                DisplayLinkToNextPage = PagedListDisplayMode.Always,
                                DisplayLinkToFirstPage = PagedListDisplayMode.Always,
                                DisplayLinkToLastPage = PagedListDisplayMode.Always,
                                Display = PagedListDisplayMode.IfNeeded,
                                ClassToApplyToFirstListItemInPager = "page-item",
                                ClassToApplyToLastListItemInPager = "page-item",
                                LinkToFirstPageFormat = "First",
                                LinkToLastPageFormat = "Last",
                                UlElementClasses = new[] { "pagination", "justify-content-center" },
                                LiElementClasses = new[] { "page-item" }
                            })
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>



<div class="modal fade" id="dynamicModal" tabindex="-1" aria-labelledby="dynamicModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dynamicModalLabel">Modal Title</h5>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <iframe id="dynamicModalContent" frameborder="0" style="width:100%; height: 500px;"></iframe>
            </div>
        </div>
    </div>
</div>

<script>
    // Listen for the modal show event
    $('#dynamicModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget); // Button that triggered the modal
        var url = button.data('url'); // Extract info from data-url attribute
        var modal = $(this);

        // Update the modal's content
        modal.find('#dynamicModalContent').attr('src', url);
    });

    // Clear iframe src when modal is hidden to prevent issues with navigation
    $('#dynamicModal').on('hidden.bs.modal', function () {
        $(this).find('#dynamicModalContent').attr('src', '');
    });

    $(".pagination").addClass("pagination justify-content-center");
    $(".pagination li").each(function () {
        $(this).addClass("page-item");
        $(this).find("a").addClass("page-link");
    });

</script>




