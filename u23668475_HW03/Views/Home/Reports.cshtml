@model u23668475_HW03.Models.CombinedViewModel

<h2>Top Loaned Books Report</h2>
<p>@ViewBag.Message</p>

<div>
    <canvas id="loanedBooksChart" style="height: 370px; width: 100%;"></canvas>
</div>
<div class="container">
    <div class="row justify-content-center">
        <!-- File Name Input -->
        <div class="col-auto mb-4">
            <label for="fileName" class="form-label">File Name:</label>
            <input type="text" id="fileName" class="form-control" placeholder="Enter file name" />
        </div>

        <!-- File Type Dropdown -->
        <div class="col-auto mb-4">
            <label for="fileType" class="form-label">File Type:</label>
            <select id="fileType" class="form-select">
                <option value="" disabled selected>Select file type</option>
                <option value="pdf">PDF</option>
                <option value="png">PNG</option>
            </select>
        </div>

        <div class="col-auto mb-4">
            <label for="description">Description:</label>
            <textarea id="description" name="description" class="form-control" rows="4" style="resize: both; min-height: 50px;"></textarea>
        </div>

        <!-- Save Button -->
        <div class="col-auto mb-4" style="margin-top: 31px;">
            <button id="saveButton" class="btn btn-primary" onclick="saveReport()">Save</button>
        </div>
    </div>
</div>

<div class="container mt-5">
    <h3>Document Archive</h3>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>File Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="documentArchiveBody">
            
        </tbody>
    </table>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    function saveReport() {
        // Retrieve values
        const fileName = document.getElementById("fileName").value.trim();
        const fileType = document.getElementById("fileType").value;
        const description = document.getElementById("description").value.trim();

        // Validate that both inputs are filled
        if (!fileName || !fileType || !description) {
            alert("Please enter a file name, select a file type and add a description.");
            return;
        }

        const chartImage = convertChartToImage();
        if (!chartImage) {
            alert("Failed to generate chart image.");
            return;
        }

        if (fileType === "png") {
            // Create a link to download the image as PNG
            const link = document.createElement('a');
            link.href = chartImage;
            link.download = `${fileName}.png`;
            link.click();
        } else if (fileType === "pdf") {
            // Create a PDF with the chart image
            const PDFChart = {
                content: [
                    
                    {
                        image: chartImage,
                        width: 500
                    },
                    { text: 'Description: ', bold: true },
                    description
                ]
            };
            pdfMake.createPdf(PDFChart).download(`${fileName}.pdf`);
        }
    }

    function convertChartToImage() {
        const chartCanvas = document.getElementById('loanedBooksChart');
        return chartCanvas ? chartCanvas.toDataURL('image/png') : null;
    }

    document.addEventListener("DOMContentLoaded", function () {
        // Process data for the top loaned books
        const booksData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Borrows
            .GroupBy(b => b.book.name)
            .Select(g => new { BookName = g.Key, BorrowCount = g.Count() })
            .OrderByDescending(b => b.BorrowCount)
            .Take(10)));

        // Extract labels and data points for Chart.js
        const labels = booksData.map(item => item.BookName);
        const dataPoints = booksData.map(item => item.BorrowCount);

        // Create the chart using Chart.js
        const ctx = document.getElementById('loanedBooksChart').getContext('2d');
        const loanedBooksChart = new Chart(ctx, {
            type: 'bar', // Bar chart for top loaned books
            data: {
                labels: labels,
                datasets: [{
                    label: 'Number of Loans',
                    data: dataPoints,
                    backgroundColor: '#FFFFFF',
                    borderColor: 'rgba(62, 26, 26, 0.79)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: { display: true, text: 'Loan Count' }
                    },
                    x: {
                        title: { display: true, text: 'Books' }
                    }
                }
            }
        });
    });
</script>
